
const createCard = (input, index) => {
   
    let innerHTML = '';

    innerHTML += '<div class="portfolio__content" data-portfolio-card index="' + index + '"><div class="portfolio__img"><a><img src="';
    innerHTML += input.imgSrc;
    innerHTML += '" alt="' + input.longDesc + '"></a></div>\n';
    innerHTML += '<div class="portfolio__data"><span class="portfolio_subtitle">';

    for (let i = 0; i < input.filters.length - 1; i++) {
        innerHTML += input.filters[i].charAt(0).toUpperCase() + input.filters[i].slice(1) + ", ";
    }
    innerHTML += input.filters[input.filters.length - 1].charAt(0).toUpperCase() + input.filters[input.filters.length - 1].slice(1);

    innerHTML += '</span><a >\n';
    innerHTML += '      <h2 class="portfolio__title">' + input.name + '</h2>\n';
    innerHTML += '</a><a  class="button button-link">Show More</a></div>\n</div>';

    return {
        filters: input.filters,
        longDesc: input.longDesc,
        imgSrc : input.imgSrc,
        name: input.name,
        html: innerHTML,
    }

}

const allCards = [
    createCard({filters: ["team"], longDesc: "Atieh Taheri, Ziv Weissman and Misha Sra. Exploratory Design of a Hands-free Video Game Controller for a Quadriplegic Individual. Augmented Humans Conference 2021 <br> Atieh Taheri, Ziv Weissman. Designing a First Person Shooter Game for Quadriplegics. Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems <br><br> In this project, I designed and implemented two video games to implement my research partner's facial expression recognition AI. Presented in conferences, Frontiers in Computer Science, and won the first place prize at ACM CHI's student game competition.", imgSrc: "assets/img/portfolio/fps.png", name: "Video Games for a Quadriplegic Individual"}, 0),
    createCard({filters: ["solo"], longDesc: "I programmed a Bitcoin Copy from scratch on Node.js. It was an awesome learning project to gain insight on backend dev, computer networks, security, and Cryptography.", imgSrc: "assets/img/portfolio/Zivcoin.png", name: "Peer-to-peer Bitcoin clone from scratch on node.js"}, 1),
    createCard({filters: ["team"], longDesc: "I created an emmulator simmular to SPIM in C++ that emmulates and runs commands in MIPS Assembly based on file and command line input.", imgSrc: "assets/img/portfolio/MIPSEmm.png", name: "MIPS Chip Emmulator"}, 2),
    createCard({filters: ["solo"], longDesc: "gilweissman.com is a site that I implemented from scratch and am maintaining. It is a personal portfolio site for a talented young actor. I learned a lot about the DNS protocol and executing sites in vanilla Javascript along with HTML structure and CSS best practices.", imgSrc: "assets/img/portfolio/GilSite.png", name: "gilweissman.com"}, 3),
    createCard({filters: ["solo"], longDesc: "I used React.js, express.js, and MySQL to implement a mockup text-sharing social media for sharing poems generated by AI. I strengthened my backend engineering skills and React.js knowledge along with learning about security practices such as web-tokens, client-side encryption, and user verification.", imgSrc: "assets/img/portfolio/AiPoems.png", name: "AI Poem Sharing Social Media"}, 4),
    createCard({filters: ["solo"], longDesc: "I started my Web Dev journey with this simple but useful chrome extension that blocks distractions on YouTube. Don't mind the typos on the store front.", imgSrc: "assets/img/portfolio/DB.png", name: "Distraction Blocker Chrome Extension"}, 5)
]

var activeNavFilters = ["team", "solo"];
const navFilterButtons = Array.from(document.getElementsByClassName("portfolio__item"));

function applyPortfolioFilter(){

}

function renderActive(){

    if (activeNavFilters == activeNavFilters == ["team", "solo"]) {
        navFilterButtons.forEach(item => {
            item.classList.remove("active");
        })
        navFilterButtons[0].classList.add("active");
        return;
    }

    navFilterButtons[0].classList.remove("active");
    navFilterButtons.forEach(item => {
        let innerText = item.textContent;
        
        if (innerText == "Team") {
            if (activeNavFilters.includes("team")) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        } else if (innerText == "Solo") {
            if (activeNavFilters.includes("solo")) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        } 
    });

    let newCardsInnerHtml = '';
    allCards.forEach((card, index) => {
        let shouldBeActive = false;
        card.filters.forEach(filter => {
            if (activeNavFilters.indexOf(filter) !== -1) {
                shouldBeActive = true;
            }
        });

        if (shouldBeActive) {
            newCardsInnerHtml += card.html;
        }
    });

    if (newCardsInnerHtml === '') {
        newCardsInnerHtml === 'Sorry, no cards match your filters'
    }

    document.getElementById("portfolio__container").innerHTML = newCardsInnerHtml;

}

navFilterButtons.forEach(item => item.addEventListener('click', function() {
    let innerText = this.textContent;

    if (innerText == "Team") {
        activeNavFilters = ["team"];
    } else if (innerText == "Solo") {
        activeNavFilters = ["solo"];
    } else {
        activeNavFilters = ["team", "solo"];
    }

    renderActive();
    openModalCards = document.querySelectorAll('[data-portfolio-card]');
    openModalCards.forEach(card => {
        card.addEventListener('click', () => {
            let index = card.getAttribute('index');
            openModalCard(index);
        })
    })

}));
renderActive();

// Logic for the modal
var openModalCards = document.querySelectorAll('[data-portfolio-card]');
var closeModalButtons = document.querySelectorAll('[data-close-modal-button]');
const overlay = document.getElementById('overlay');
const modal = Array.from(document.getElementsByClassName('modal'))[0];

openModalCards.forEach(card => {
    card.addEventListener('click', () => {
        let index = card.getAttribute('index');
        openModalCard(index);
    })
})

closeModalButtons.forEach(button => {
    button.addEventListener('click', () => {
        closeModal();
    })
})

function openModalCard(index) {
    setModalInnerHTML(allCards[index]);
    modal.classList.add('active');
    overlay.classList.add('active');
    closeModalButtons = document.querySelectorAll('[data-close-modal-button]');
    closeModalButtons.forEach(button => {
        button.addEventListener('click', () => {
            closeModal();
        })
    })
}

function closeModal() {
    modal.classList.remove('active');
    overlay.classList.remove('active');
}

function setModalInnerHTML(card) {
    let retval = "<div class='modal-header'>\n";
    retval += "<h2 class=section-title-modal' data-modal-title>" + card.name + "</h2>\n";
    retval += "<button class='button modal-button' data-close-modal-button>&times;</button></div><div class='modal-body bd-grid'><div class='modal-img'>\n";
    retval += '<img src="' + card.imgSrc + '" class="about__img"></div><div class="modal-text">\n';
    retval += card.longDesc;
    retval += '</div></div></div>';

    modal.innerHTML = retval;
}

overlay.addEventListener('click', () => {
    closeModal();
})

// Carousel functionallity

const carouselButtons = document.querySelectorAll("[data-carousel-button]");
console.log(carouselButtons);

let cardIndex = 0;
let photoCards = [
    {
        imgSrc: "assets/img/pragma.jpg",
        description: "\"Pragma: The Beach Ball Play\" (Oct. 2022). Written and directed by Gil Weissman, featured in the UCLA school of Theater, Film and Television's Bruin Fringe Festival."
    }
];

setAcviteCard = (offset) => {
    cardIndex = (cardIndex + offset) % photoCards.length;
    document.getElementById("active-photo-img").src = photoCards[cardIndex].imgSrc;
    document.getElementById("active-photo-txt").innerText = photoCards[cardIndex].description;
}

carouselButtons.forEach(button => {
    button.addEventListener("click", () => {
        const offset = button.dataset.carouselButton === "next" ? 1 : -1;
        const carousel = button.closest("[data-carousel]");
        carousel.dataset.hide = true;
        console.log(offset);

        setTimeout(() => {
            setAcviteCard(offset);
            delete carousel.dataset.hide;
        }, 200);
    })
});